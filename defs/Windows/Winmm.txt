include Headers\windows.h.txt
include Headers\multimedia.h.txt

dll Winmm.dll callingConvention=STDCALL onlineHelp=MSDN
moduleAlias winmmbase.dll
category "Audio and Video/Legacy Audio and Video/Windows Multimedia/Multimedia Audio/Waveform Audio/Auxiliary Devices"
category "Audio and Video/Legacy Audio and Video/Windows Multimedia/Multimedia Input/Joysticks"
category "Audio and Video/Legacy Audio and Video/Windows Multimedia/MCI"
category "Audio and Video/Legacy Audio and Video/Windows Multimedia/Multimedia Audio/Musical Instrument Digital Interface (MIDI)"
category "Audio and Video/Legacy Audio and Video/Windows Multimedia/Multimedia Audio/Audio Mixers"
category "Audio and Video/Legacy Audio and Video/Windows Multimedia/Multimedia Input/Multimedia File IO"
category "Audio and Video/Legacy Audio and Video/Windows Multimedia/Multimedia Input/Multimedia Timers"
category "Audio and Video/Legacy Audio and Video/Windows Multimedia/Multimedia Audio/Waveform Audio/Recording"
category "Audio and Video/Legacy Audio and Video/Windows Multimedia/Multimedia Audio/Waveform Audio/Playing"
category "Audio and Video/Legacy Audio and Video/Windows Multimedia/Multimedia Audio/Waveform Audio/Easy Playback"
category "Audio and Video/Legacy Audio and Video/Windows Multimedia/Installable Drivers"
category "Audio and Video/Legacy Audio and Video/Windows Multimedia/Deprecated"
alias MCIDEVICEID UINT

alias YIELDPROC LPVOID

alias HMIDI HANDLE

alias HMIDIOUT HANDLE

pointer LPHMIDIOUT HMIDIOUT

alias HMIDIIN HANDLE

pointer LPHMIDIIN HMIDIIN

alias HMIDISTRM HANDLE

pointer LPHMIDISTRM HMIDISTRM

alias HMIXER HANDLE

pointer LPHMIXER HMIXER

alias HMIXEROBJ HMIXER

alias HMMIO HANDLE

alias LPMMIOPROC LPVOID

alias HPSTR LPVOID

alias HWAVEIN HANDLE

pointer LPHWAVEIN HWAVEIN

alias HWAVEOUT HANDLE

pointer LPHWAVEOUT HWAVEOUT

alias LPTIMECALLBACK LPVOID

alias MMVERSION UINT

alias HDRVR HANDLE

alias DRIVERMSGPROC LPVOID

alias LPTASKCALLBACK LPVOID

array "DWORD [6]" base=DWORD count=6

array "DWORD_PTR [8]" base=DWORD_PTR count=8

array "TCHAR [MAXPNAMELEN]" base=TCHAR count=32

array "TCHAR [MIXER_SHORT_NAME_CHARS]" base=TCHAR count=16

array "TCHAR [MIXER_LONG_NAME_CHARS]" base=TCHAR count=64

array "TCHAR [MAX_JOYSTICKOEMVXDNAME]" base=TCHAR count=260

flag [WAVE_FORMAT] DWORD display=DWORD
  WAVE_INVALIDFORMAT 0x00000000
  WAVE_FORMAT_1M08   0x00000001
  WAVE_FORMAT_1S08   0x00000002
  WAVE_FORMAT_1M16   0x00000004
  WAVE_FORMAT_1S16   0x00000008
  WAVE_FORMAT_2M08   0x00000010
  WAVE_FORMAT_2S08   0x00000020
  WAVE_FORMAT_2M16   0x00000040
  WAVE_FORMAT_2S16   0x00000080
  WAVE_FORMAT_4M08   0x00000100
  WAVE_FORMAT_44M08  0x00000100
  WAVE_FORMAT_4S08   0x00000200
  WAVE_FORMAT_44S08  0x00000200
  WAVE_FORMAT_44M16  0x00000400
  WAVE_FORMAT_4M16   0x00000400
  WAVE_FORMAT_44S16  0x00000800
  WAVE_FORMAT_4S16   0x00000800
  WAVE_FORMAT_48M08  0x00001000
  WAVE_FORMAT_48S08  0x00002000
  WAVE_FORMAT_48M16  0x00004000
  WAVE_FORMAT_48S16  0x00008000
  WAVE_FORMAT_96M08  0x00010000
  WAVE_FORMAT_96S08  0x00020000
  WAVE_FORMAT_96M16  0x00040000
  WAVE_FORMAT_96S16  0x00080000

enum [AUXCAPS_TECH] WORD display=WORD
  AUXCAPS_CDAUDIO 1
  AUXCAPS_AUXIN   2

flag [AUXCAPS_SUPPORT] DWORD display=DWORD
  AUXCAPS_VOLUME   0x0001
  AUXCAPS_LRVOLUME 0x0002

struct AUXCAPS pack=1
  wMid WORD
  wPid WORD
  vDriverVersion MMVERSION
  szPname "TCHAR [MAXPNAMELEN]"
  wTechnology [AUXCAPS_TECH]
  wReserved1 WORD
  dwSupport [AUXCAPS_SUPPORT]

pointer LPAUXCAPS AUXCAPS

flag [JOYCAPS_FLAGS] UINT display=UINT
  JOYCAPS_HASZ    0x0001
  JOYCAPS_HASR    0x0002
  JOYCAPS_HASU    0x0004
  JOYCAPS_HASV    0x0008
  JOYCAPS_HASPOV  0x0010
  JOYCAPS_POV4DIR 0x0020
  JOYCAPS_POVCTS  0x0040

struct JOYCAPS pack=1
  wMid WORD
  wPid WORD
  szPname "TCHAR [MAXPNAMELEN]"
  wXmin UINT
  wXmax UINT
  wYmin UINT
  wYmax UINT
  wZmin UINT
  wZmax UINT
  wNumButtons UINT
  wPeriodMin UINT
  wPeriodMax UINT
  wRmin UINT
  wRmax UINT
  wUmin UINT
  wUmax UINT
  wVmin UINT
  wVmax UINT
  wCaps [JOYCAPS_FLAGS]
  wMaxAxes UINT
  wNumAxes UINT
  wMaxButtons UINT
  szRegKey "TCHAR [MAXPNAMELEN]"
  szOEMVxD "TCHAR [MAX_JOYSTICKOEMVXDNAME]"

pointer LPJOYCAPS JOYCAPS

flag [MIDIHDR_FLAGS] DWORD display=DWORD
  MHDR_DONE     0x00000001
  MHDR_PREPARED 0x00000002
  MHDR_INQUEUE  0x00000004
  MHDR_ISSTRM   0x00000008

struct MIDIHDR pack=1
  lpData LPVOID display=LPSTR
  dwBufferLength DWORD
  dwBytesRecorded DWORD
  dwUser DWORD_PTR
  dwFlags [MIDIHDR_FLAGS]
  lpNext LPVOID display=MIDIHDR*
  reserved DWORD_PTR
  dwOffset DWORD
  dwReserved "DWORD_PTR [8]"

pointer LPMIDIHDR MIDIHDR

struct MIDIINCAPS pack=1
  wMid WORD
  wPid WORD
  vDriverVersion MMVERSION
  szPname "TCHAR [MAXPNAMELEN]"
  dwSupport DWORD

pointer LPMIDIINCAPS MIDIINCAPS

enum [MIDIOUTCAPS_TECH] WORD display=WORD
  MOD_MIDIPORT  1
  MOD_SYNTH     2
  MOD_SQSYNTH   3
  MOD_FMSYNTH   4
  MOD_MAPPER    5
  MOD_WAVETABLE 6
  MOD_SWSYNTH   7

flag [MIDICAPS_FLAGS] DWORD display=DWORD
  MIDICAPS_VOLUME   0x0001
  MIDICAPS_LRVOLUME 0x0002
  MIDICAPS_CACHE    0x0004
  MIDICAPS_STREAM   0x0008

struct MIDIOUTCAPS pack=1
  wMid WORD
  wPid WORD
  vDriverVersion MMVERSION
  szPname "TCHAR [MAXPNAMELEN]"
  wTechnology [MIDIOUTCAPS_TECH]
  wVoices WORD
  wNotes WORD
  wChannelMask WORD
  dwSupport [MIDICAPS_FLAGS]

pointer LPMIDIOUTCAPS MIDIOUTCAPS

union [MIXERCONTROLDETAILS_u] pack=1 display=union
  hwndOwner HWND
  cMultipleItems DWORD

struct MIXERCONTROLDETAILS pack=1
  cbStruct DWORD
  dwControlID DWORD
  cChannels DWORD
   [MIXERCONTROLDETAILS_u]
  cbDetails DWORD
  paDetails LPVOID

pointer LPMIXERCONTROLDETAILS MIXERCONTROLDETAILS

struct MIXERCAPS pack=1
  wMid WORD
  wPid WORD
  vDriverVersion MMVERSION
  szPname "TCHAR [MAXPNAMELEN]"
  fdwSupport DWORD
  cDestinations DWORD

pointer LPMIXERCAPS MIXERCAPS

union [MIXERLINECONTROLS_u] pack=1 display=union
  dwControlID DWORD
  dwControlType DWORD

struct [MIXERCONTROL_u1_s1] pack=1 display=struct
  lMinimum LONG
  lMaximum LONG

struct [MIXERCONTROL_u1_s2] pack=1 display=struct
  dwMinimum DWORD
  dwMaximum DWORD

union [MIXERCONTROL_u1] pack=1 display=union
   [MIXERCONTROL_u1_s1]
   [MIXERCONTROL_u1_s2]
  dwReserved "DWORD [6]"

union [MIXERCONTROL_u2] pack=1 display=union
  cSteps DWORD
  cbCustomData DWORD
  dwReserved "DWORD [6]"

enum [MIXERCONTROL_CT_CLASS] DWORD display=DWORD
  MIXERCONTROL_CT_CLASS_CUSTOM 0x00000000
  MIXERCONTROL_CT_CLASS_METER  0x10000000
  MIXERCONTROL_CT_CLASS_SWITCH 0x20000000
  MIXERCONTROL_CT_CLASS_NUMBER 0x30000000
  MIXERCONTROL_CT_CLASS_SLIDER 0x40000000
  MIXERCONTROL_CT_CLASS_FADER  0x50000000
  MIXERCONTROL_CT_CLASS_TIME   0x60000000
  MIXERCONTROL_CT_CLASS_LIST   0x70000000

flag [MIXERCONTROL_CONTROLF] DWORD display=DWORD
  MIXERCONTROL_CONTROLF_UNIFORM  0x00000001
  MIXERCONTROL_CONTROLF_MULTIPLE 0x00000002
  MIXERCONTROL_CONTROLF_DISABLED 0x80000000

struct MIXERCONTROL pack=1
  cbStruct DWORD
  dwControlID DWORD
  dwControlType [MIXERCONTROL_CT_CLASS]
  fdwControl [MIXERCONTROL_CONTROLF]
  cMultipleItems DWORD
  szShortName "TCHAR [MIXER_SHORT_NAME_CHARS]"
  szName "TCHAR [MIXER_LONG_NAME_CHARS]"
  Bounds [MIXERCONTROL_u1]
  Metrics [MIXERCONTROL_u2]

pointer LPMIXERCONTROL MIXERCONTROL

struct MIXERLINECONTROLS pack=1
  cbStruct DWORD
  dwLineID DWORD
   [MIXERLINECONTROLS_u]
  cControls DWORD
  cbmxctrl DWORD
  pamxctrl LPMIXERCONTROL

pointer LPMIXERLINECONTROLS MIXERLINECONTROLS

flag [MIXERLINE_LINEF] DWORD display=DWORD
  MIXERLINE_LINEF_ACTIVE       0x00000001
  MIXERLINE_LINEF_DISCONNECTED 0x00008000
  MIXERLINE_LINEF_SOURCE       0x80000000

enum [MIXERLINE_COMPONENTTYPE] DWORD display=DWORD
  MIXERLINE_COMPONENTTYPE_DST_UNDEFINED   0
  MIXERLINE_COMPONENTTYPE_DST_DIGITAL     1
  MIXERLINE_COMPONENTTYPE_DST_LINE        2
  MIXERLINE_COMPONENTTYPE_DST_MONITOR     3
  MIXERLINE_COMPONENTTYPE_DST_SPEAKERS    4
  MIXERLINE_COMPONENTTYPE_DST_HEADPHONES  5
  MIXERLINE_COMPONENTTYPE_DST_TELEPHONE   6
  MIXERLINE_COMPONENTTYPE_DST_WAVEIN      7
  MIXERLINE_COMPONENTTYPE_DST_VOICEIN     8
  MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED   0x00001000
  MIXERLINE_COMPONENTTYPE_SRC_DIGITAL     0x00001001
  MIXERLINE_COMPONENTTYPE_SRC_LINE        0x00001002
  MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE  0x00001003
  MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER 0x00001004
  MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC 0x00001005
  MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE   0x00001006
  MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER   0x00001007
  MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT     0x00001008
  MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY   0x00001009
  MIXERLINE_COMPONENTTYPE_SRC_ANALOG      0x0000100A

enum [MIXERLINE_TARGETTYPE] DWORD display=DWORD
  MIXERLINE_TARGETTYPE_UNDEFINED 0
  MIXERLINE_TARGETTYPE_WAVEOUT   1
  MIXERLINE_TARGETTYPE_WAVEIN    2
  MIXERLINE_TARGETTYPE_MIDIOUT   3
  MIXERLINE_TARGETTYPE_MIDIIN    4
  MIXERLINE_TARGETTYPE_AUX       5

struct [MIXERLINE_s] pack=1 display=struct
  dwType [MIXERLINE_TARGETTYPE]
  dwDeviceID DWORD
  wMid WORD
  wPid WORD
  vDriverVersion MMVERSION
  szPname "TCHAR [MAXPNAMELEN]"

struct MIXERLINE pack=1
  cbStruct DWORD
  dwDestination DWORD
  dwSource DWORD
  dwLineID DWORD
  fdwLine [MIXERLINE_LINEF]
  dwUser DWORD_PTR
  dwComponentType [MIXERLINE_COMPONENTTYPE]
  cChannels DWORD
  cConnections DWORD
  cControls DWORD
  szShortName "TCHAR [MIXER_SHORT_NAME_CHARS]"
  szName "TCHAR [MIXER_LONG_NAME_CHARS]"
  Target [MIXERLINE_s]

pointer LPMIXERLINE MIXERLINE

flag [MMIOINFO_FLAGS] DWORD display=DWORD
  MMIO_READ      0x00000000
  MMIO_COMPAT    0x00000000
  MMIO_WRITE     0x00000001
  MMIO_READWRITE 0x00000002
  MMIO_EXCLUSIVE 0x00000010
  MMIO_DENYWRITE 0x00000020
  MMIO_DENYREAD  0x00000030
  MMIO_DENYNONE  0x00000040
  MMIO_PARSE     0x00000100
  MMIO_DELETE    0x00000200
  MMIO_CREATE    0x00001000
  MMIO_EXIST     0x00004000
  MMIO_ALLOCBUF  0x00010000
  MMIO_GETTEMP   0x00020000
  MMIO_DIRTY     0x10000000

struct MMIOINFO pack=1
  dwFlags [MMIOINFO_FLAGS]
  fccIOProc FOURCC
  pIOProc LPMMIOPROC
  wErrorRet MMRESULT display=UINT
  htask HTASK
  cchBuffer LONG
  pchBuffer HPSTR
  pchNext HPSTR
  pchEndRead HPSTR
  pchEndWrite HPSTR
  lBufOffset LONG
  lDiskOffset LONG
  adwInfo "DWORD [3]"
  dwReserved1 DWORD
  dwReserved2 DWORD
  hmmio HMMIO

pointer LPMMIOINFO MMIOINFO

pointer "const LPMMIOINFO" MMIOINFO

flag [WHDR_FLAGS] DWORD display=DWORD
  WHDR_DONE      0x00000001
  WHDR_PREPARED  0x00000002
  WHDR_BEGINLOOP 0x00000004
  WHDR_ENDLOOP   0x00000008
  WHDR_INQUEUE   0x00000010

struct WAVEHDR pack=1
  lpData LPVOID display=LPSTR
  dwBufferLength DWORD
  dwBytesRecorded DWORD
  dwUser DWORD_PTR
  dwFlags [WHDR_FLAGS]
  dwLoops DWORD
  lpNext LPVOID display=WAVEHDR*
  reserved DWORD_PTR

pointer LPWAVEHDR WAVEHDR

struct WAVEINCAPS pack=1
  wMid WORD
  wPid WORD
  vDriverVersion MMVERSION
  szPname "TCHAR [MAXPNAMELEN]"
  dwFormats [WAVE_FORMAT]
  wChannels WORD
  wReserved1 WORD

pointer LPWAVEINCAPS WAVEINCAPS

flag [WAVEOUTCAPS_SUPPORT] DWORD display=DWORD
  WAVECAPS_PITCH          0x0001
  WAVECAPS_PLAYBACKRATE   0x0002
  WAVECAPS_VOLUME         0x0004
  WAVECAPS_LRVOLUME       0x0008
  WAVECAPS_SYNC           0x0010
  WAVECAPS_SAMPLEACCURATE 0x0020

struct WAVEOUTCAPS pack=1
  wMid WORD
  wPid WORD
  vDriverVersion MMVERSION
  szPname "TCHAR [MAXPNAMELEN]"
  dwFormats [WAVE_FORMAT]
  wChannels WORD
  wReserved1 WORD
  dwSupport [WAVEOUTCAPS_SUPPORT]

pointer LPWAVEOUTCAPS WAVEOUTCAPS

flag [JoyButton] UINT display=UINT
  JOY_BUTTON1 0x0001
  JOY_BUTTON2 0x0002
  JOY_BUTTON3 0x0004
  JOY_BUTTON4 0x0008

struct JOYINFO pack=1
  wXpos UINT
  wYpos UINT
  wZpos UINT
  wButtons [JoyButton]

pointer LPJOYINFO JOYINFO

enum [JoyPov] DWORD display=DWORD
  JOY_POVFORWARD  0
  JOY_POVRIGHT    9000
  JOY_POVBACKWARD 18000
  JOY_POVLEFT     27000
  JOY_POVCENTERED 0xFFFF

flag [JoyButtonAll] DWORD display=DWORD
  JOY_BUTTON1  0x0001
  JOY_BUTTON2  0x0002
  JOY_BUTTON3  0x0004
  JOY_BUTTON4  0x0008
  JOY_BUTTON5  0x00000010
  JOY_BUTTON6  0x00000020
  JOY_BUTTON7  0x00000040
  JOY_BUTTON8  0x00000080
  JOY_BUTTON9  0x00000100
  JOY_BUTTON10 0x00000200
  JOY_BUTTON11 0x00000400
  JOY_BUTTON12 0x00000800
  JOY_BUTTON13 0x00001000
  JOY_BUTTON14 0x00002000
  JOY_BUTTON15 0x00004000
  JOY_BUTTON16 0x00008000
  JOY_BUTTON17 0x00010000
  JOY_BUTTON18 0x00020000
  JOY_BUTTON19 0x00040000
  JOY_BUTTON20 0x00080000
  JOY_BUTTON21 0x00100000
  JOY_BUTTON22 0x00200000
  JOY_BUTTON23 0x00400000
  JOY_BUTTON24 0x00800000
  JOY_BUTTON25 0x01000000
  JOY_BUTTON26 0x02000000
  JOY_BUTTON27 0x04000000
  JOY_BUTTON28 0x08000000
  JOY_BUTTON29 0x10000000
  JOY_BUTTON30 0x20000000
  JOY_BUTTON31 0x40000000
  JOY_BUTTON32 0x80000000

flag [JOYINFOEX_Flags] DWORD display=DWORD
  JOY_RETURNX        0x00000001
  JOY_RETURNY        0x00000002
  JOY_RETURNZ        0x00000004
  JOY_RETURNR        0x00000008
  JOY_RETURNU        0x00000010
  JOY_RETURNV        0x00000020
  JOY_RETURNPOV      0x00000040
  JOY_RETURNBUTTONS  0x00000080
  JOY_RETURNALL      0x000000FF
  JOY_RETURNRAWDATA  0x00000100
  JOY_RETURNPOVCTS   0x00000200
  JOY_RETURNCENTERED 0x00000400
  JOY_USEDEADZONE    0x00000800
  JOY_CAL_READALWAYS 0x00010000
  JOY_CAL_READXYONLY 0x00020000
  JOY_CAL_READ3      0x00040000
  JOY_CAL_READ4      0x00080000
  JOY_CAL_READXONLY  0x00100000
  JOY_CAL_READYONLY  0x00200000
  JOY_CAL_READ5      0x00400000
  JOY_CAL_READ6      0x00800000
  JOY_CAL_READZONLY  0x01000000
  JOY_CAL_READRONLY  0x02000000
  JOY_CAL_READUONLY  0x04000000
  JOY_CAL_READVONLY  0x08000000

struct JOYINFOEX pack=1
  dwSize DWORD
  dwFlags [JOYINFOEX_Flags]
  dwXpos DWORD
  dwYpos DWORD
  dwZpos DWORD
  dwRpos DWORD
  dwUpos DWORD
  dwVpos DWORD
  dwButtons [JoyButtonAll]
  dwButtonNumber DWORD
  dwPOV [JoyPov]
  dwReserved1 DWORD
  dwReserved2 DWORD

pointer LPJOYINFOEX JOYINFOEX

flag [MMCKINFO_Flags] DWORD display=DWORD
  MMIO_DIRTY 0x10000000

struct MMCKINFO pack=1
  ckid FOURCC
  cksize DWORD
  fccType FOURCC
  dwDataOffset DWORD
  dwFlags [MMCKINFO_Flags]

pointer LPMMCKINFO MMCKINFO

struct TIMECAPS pack=1
  wPeriodMin UINT
  wPeriodMax UINT

pointer LPTIMECAPS TIMECAPS

enum MCIERROR DWORD
  success Equal=0
  MCIERR_INVALID_DEVICE_ID        257
  MCIERR_UNRECOGNIZED_KEYWORD     259
  MCIERR_UNRECOGNIZED_COMMAND     261
  MCIERR_HARDWARE                 262
  MCIERR_INVALID_DEVICE_NAME      263
  MCIERR_OUT_OF_MEMORY            264
  MCIERR_DEVICE_OPEN              265
  MCIERR_CANNOT_LOAD_DRIVER       266
  MCIERR_MISSING_COMMAND_STRING   267
  MCIERR_PARAM_OVERFLOW           268
  MCIERR_MISSING_STRING_ARGUMENT  269
  MCIERR_BAD_INTEGER              270
  MCIERR_PARSER_INTERNAL          271
  MCIERR_DRIVER_INTERNAL          272
  MCIERR_MISSING_PARAMETER        273
  MCIERR_UNSUPPORTED_FUNCTION     274
  MCIERR_FILE_NOT_FOUND           275
  MCIERR_DEVICE_NOT_READY         276
  MCIERR_INTERNAL                 277
  MCIERR_DRIVER                   278
  MCIERR_CANNOT_USE_ALL           279
  MCIERR_MULTIPLE                 280
  MCIERR_EXTENSION_NOT_FOUND      281
  MCIERR_OUTOFRANGE               282
  MCIERR_FLAGS_NOT_COMPATIBLE     284
  MCIERR_FILE_NOT_SAVED           286
  MCIERR_DEVICE_TYPE_REQUIRED     287
  MCIERR_DEVICE_LOCKED            288
  MCIERR_DUPLICATE_ALIAS          289
  MCIERR_BAD_CONSTANT             290
  MCIERR_MUST_USE_SHAREABLE       291
  MCIERR_MISSING_DEVICE_NAME      292
  MCIERR_BAD_TIME_FORMAT          293
  MCIERR_NO_CLOSING_QUOTE         294
  MCIERR_DUPLICATE_FLAGS          295
  MCIERR_INVALID_FILE             296
  MCIERR_NULL_PARAMETER_BLOCK     297
  MCIERR_UNNAMED_RESOURCE         298
  MCIERR_NEW_REQUIRES_ALIAS       299
  MCIERR_NOTIFY_ON_AUTO_OPEN      300
  MCIERR_NO_ELEMENT_ALLOWED       301
  MCIERR_NONAPPLICABLE_FUNCTION   302
  MCIERR_ILLEGAL_FOR_AUTO_OPEN    303
  MCIERR_FILENAME_REQUIRED        304
  MCIERR_EXTRA_CHARACTERS         305
  MCIERR_DEVICE_NOT_INSTALLED     306
  MCIERR_GET_CD                   307
  MCIERR_SET_CD                   308
  MCIERR_SET_DRIVE                309
  MCIERR_DEVICE_LENGTH            310
  MCIERR_DEVICE_ORD_LENGTH        311
  MCIERR_NO_INTEGER               312
  MCIERR_WAVE_OUTPUTSINUSE        320
  MCIERR_WAVE_SETOUTPUTINUSE      321
  MCIERR_WAVE_INPUTSINUSE         322
  MCIERR_WAVE_SETINPUTINUSE       323
  MCIERR_WAVE_OUTPUTUNSPECIFIED   324
  MCIERR_WAVE_INPUTUNSPECIFIED    325
  MCIERR_WAVE_OUTPUTSUNSUITABLE   326
  MCIERR_WAVE_SETOUTPUTUNSUITABLE 327
  MCIERR_WAVE_INPUTSUNSUITABLE    328
  MCIERR_WAVE_SETINPUTUNSUITABLE  329
  MCIERR_SEQ_DIV_INCOMPATIBLE     336
  MCIERR_SEQ_PORT_INUSE           337
  MCIERR_SEQ_PORT_NONEXISTENT     338
  MCIERR_SEQ_PORT_MAPNODEVICE     339
  MCIERR_SEQ_PORT_MISCERROR       340
  MCIERR_SEQ_TIMER                341
  MCIERR_SEQ_PORTUNSPECIFIED      342
  MCIERR_SEQ_NOMIDIPRESENT        343
  MCIERR_NO_WINDOW                346
  MCIERR_CREATEWINDOW             347
  MCIERR_FILE_READ                348
  MCIERR_FILE_WRITE               349
  MCIERR_NO_IDENTITY              350

flag [waveInOutOpenFlags] DWORD display=DWORD
  CALLBACK_NULL                            0x00000000
  WAVE_FORMAT_QUERY                        0x0001
  WAVE_ALLOWSYNC                           0x0002
  WAVE_MAPPED                              0x0004
  WAVE_FORMAT_DIRECT                       0x0008
  WAVE_FORMAT_DIRECT_QUERY                 0x0009
  WAVE_MAPPED_DEFAULT_COMMUNICATION_DEVICE 0x0010
  CALLBACK_WINDOW                          0x00010000
  CALLBACK_THREAD                          0x00020000
  CALLBACK_FUNCTION                        0x00030000
  CALLBACK_EVENT                           0x00050000
  CALLBACK_TYPEMASK                        0x00070000

flag [midiInOutOpenFlags] DWORD display=DWORD
  WAVE_FORMAT_QUERY                        0x0001
  WAVE_ALLOWSYNC                           0x0002
  WAVE_MAPPED                              0x0004
  WAVE_FORMAT_DIRECT                       0x0008
  WAVE_FORMAT_DIRECT_QUERY                 0x0009
  WAVE_MAPPED_DEFAULT_COMMUNICATION_DEVICE 0x0010
  MIDI_IO_STATUS                           0x00000020

flag [mmioInstallIOProcFlags] DWORD display=DWORD
  MMIO_INSTALLPROC 0x00010000
  MMIO_REMOVEPROC  0x00020000
  MMIO_FINDPROC    0x00040000
  MMIO_UNICODEPROC 0x01000000
  MMIO_GLOBALPROC  0x10000000

flag [mmioCloseFlags] UINT display=UINT
  MMIO_FHOPEN 0x0010

flag [mmioFlushFlags] UINT display=UINT
  MMIO_EMPTYBUF 0x0010

flag [mmioStringToFOURCCFlags] UINT display=UINT
  MMIO_TOUPPER 0x0010

flag [mmioDescendFlags] UINT display=UINT
  MMIO_FINDCHUNK 0x0010
  MMIO_FINDRIFF  0x0020
  MMIO_FINDLIST  0x0040

flag [mmioCreateChunkFlags] UINT display=UINT
  MMIO_CREATERIFF 0x0020
  MMIO_CREATELIST 0x0040

enum [mmioSeekOffset] int display=int
  SEEK_SET 0
  SEEK_CUR 1
  SEEK_END 2

struct [MMTIME_u_s1] display=struct
  hour BYTE
  min BYTE
  sec BYTE
  frame BYTE
  fps BYTE
  dummy BYTE
  pad "BYTE [2]"

struct [MMTIME_u_s2] display=struct
  songptrpos DWORD

union [MMTIME_u] display=union
  ms DWORD
  sample DWORD
  cb DWORD
  ticks DWORD
  smpte [MMTIME_u_s1]
  midi [MMTIME_u_s2]

enum [MMTIME_TYPE] UINT display=UINT
  TIME_MS      0x0001
  TIME_SAMPLES 0x0002
  TIME_BYTES   0x0004
  TIME_SMPTE   0x0008
  TIME_MIDI    0x0010
  TIME_TICKS   0x0020

struct MMTIME
  wType [MMTIME_TYPE]
  u [MMTIME_u]

pointer LPMMTIME MMTIME

enum [SND_FLAGS] DWORD display=DWORD
  SND_SYNC        0x0000
  SND_ASYNC       0x0001
  SND_NODEFAULT   0x0002
  SND_MEMORY      0x0004
  SND_LOOP        0x0008
  SND_NOSTOP      0x0010
  SND_PURGE       0x0040
  SND_APPLICATION 0x0080
  SND_NOWAIT      0x00002000
  SND_ALIAS       0x00010000
  SND_FILENAME    0x00020000
  SND_RESOURCE    0x00040004
  SND_SENTRY      0x00080000
  SND_RING        0x00100000
  SND_ALIAS_ID    0x00110000
  SND_SYSTEM      0x00200000

flag [DCB_FLAGS] DWORD display=DWORD
  DCB_NULL     0x0000
  DCB_WINDOW   0x0001
  DCB_TASK     0x0002
  DCB_FUNCTION 0x0003
  DCB_EVENT    0x0005
  DCB_NOSWITCH 0x0008

func auxGetDevCaps bothCharset
  MMRESULT
  uDeviceID UINT_PTR
  lpCaps LPAUXCAPS
  cbCaps UINT

func auxGetNumDevs
  success NotEqual=0
  UINT

func auxGetVolume
  MMRESULT
  uDeviceID UINT
  lpdwVolume LPDWORD

func auxOutMessage
  MMRESULT
  uDeviceID UINT
  uMsg UINT
  dwParam1 DWORD_PTR
  dwParam2 DWORD_PTR

func auxSetVolume
  MMRESULT
  uDeviceID UINT
  dwVolume DWORD

func joyConfigChanged
  MMRESULT
  dwFlags DWORD

func joyGetDevCaps bothCharset
  MMRESULT
  uJoyID UINT_PTR
  pjc LPJOYCAPS
  cbjc UINT

func joyGetNumDevs
  success NotEqual=0
  UINT

func joyGetPos
  MMRESULT
  uJoyID UINT
  pji LPJOYINFO

func joyGetPosEx
  MMRESULT
  uJoyID UINT
  pji LPJOYINFOEX

func joyGetThreshold
  MMRESULT
  uJoyID UINT
  puThreshold LPUINT

func joyReleaseCapture
  MMRESULT
  uJoyID UINT

func joySetCapture
  MMRESULT
  hwnd HWND
  uJoyID UINT
  uPeriod UINT
  fChanged BOOL

func joySetThreshold
  MMRESULT
  uJoyID UINT
  uThreshold UINT

func mciExecute
  BOOL
  pszCommand LPCSTR

func mciGetCreatorTask
  success NotEqual=0
  HANDLE
  IDDevice MCIDEVICEID

func mciGetDeviceID bothCharset
  success NotEqual=0
  MCIDEVICEID
  lpszDevice LPCTSTR

func mciGetDeviceIDFromElementID bothCharset
  success NotEqual=0
  MCIDEVICEID
  dwElementID DWORD
  lpstrType LPCTSTR

func mciGetErrorString bothCharset
  BOOL
  fdwError DWORD
  lpszErrorText LPTSTR
  cchErrorText UINT

func mciGetYieldProc
  success NotEqual=0
  YIELDPROC
  IDDevice MCIDEVICEID
  lpdwYieldData LPDWORD

func mciSendCommand bothCharset
  MCIERROR
  IDDevice MCIDEVICEID
  uMsg UINT
  fdwCommand DWORD
  dwParam DWORD_PTR

func mciSendString bothCharset
  MCIERROR
  lpszCommand LPCTSTR
  lpszReturnString LPTSTR
  cchReturn UINT
  hwndCallback HANDLE

func mciSetYieldProc
  success NotEqual=0
  UINT
  IDDevice MCIDEVICEID
  yp YIELDPROC
  dwYieldData DWORD

func midiConnect
  MMRESULT
  hMidi HMIDI
  hmo HMIDIOUT
  pReserved LPVOID

func midiDisconnect
  MMRESULT
  hMidi HMIDI
  hmo HMIDIOUT
  pReserved LPVOID

func midiInAddBuffer
  MMRESULT
  hMidiIn HMIDIIN
  lpMidiInHdr LPMIDIHDR
  cbMidiInHdr UINT

func midiInClose
  MMRESULT
  hMidiIn HMIDIIN

func midiInGetDevCaps bothCharset
  MMRESULT
  uDeviceID UINT_PTR
  lpMidiInCaps LPMIDIINCAPS
  cbMidiInCaps UINT

func midiInGetErrorText bothCharset
  MMRESULT
  wError MMRESULT
  lpText LPTSTR
  cchText UINT

func midiInGetID
  MMRESULT
  hmi HMIDIIN
  puDeviceID LPUINT

func midiInGetNumDevs
  success NotEqual=0
  UINT

func midiInMessage
  MMRESULT
  deviceID HMIDIIN
  msg UINT
  dw1 DWORD_PTR
  dw2 DWORD_PTR

func midiInOpen
  MMRESULT
  lphMidiIn LPHMIDIIN
  uDeviceID UINT_PTR
  dwCallback DWORD_PTR
  dwCallbackInstance DWORD_PTR
  dwFlags [midiInOutOpenFlags]

func midiInPrepareHeader
  MMRESULT
  hMidiIn HMIDIIN
  lpMidiInHdr LPMIDIHDR
  cbMidiInHdr UINT

func midiInReset
  MMRESULT
  hMidiIn HMIDIIN

func midiInStart
  MMRESULT
  hMidiIn HMIDIIN

func midiInStop
  MMRESULT
  hMidiIn HMIDIIN

func midiInUnprepareHeader
  MMRESULT
  hMidiIn HMIDIIN
  lpMidiInHdr LPMIDIHDR
  cbMidiInHdr UINT

func midiOutCacheDrumPatches
  MMRESULT
  hmo HMIDIOUT
  wPatch UINT
  lpKeyArray WORD*
  wFlags UINT

func midiOutCachePatches
  MMRESULT
  hmo HMIDIOUT
  wBank UINT
  lpPatchArray WORD*
  wFlags UINT

func midiOutClose
  MMRESULT
  hmo HMIDIOUT

func midiOutGetDevCaps bothCharset
  MMRESULT
  uDeviceID UINT_PTR
  lpMidiOutCaps LPMIDIOUTCAPS
  cbMidiOutCaps UINT

func midiOutGetErrorText bothCharset
  success NotEqual=0
  UINT
  mmrError MMRESULT
  lpText LPTSTR
  cchText UINT

func midiOutGetID
  MMRESULT
  hmo HMIDIOUT
  puDeviceID LPUINT

func midiOutGetNumDevs
  success NotEqual=0
  UINT

func midiOutGetVolume
  MMRESULT
  hmo HMIDIOUT
  lpdwVolume LPDWORD

func midiOutLongMsg
  MMRESULT
  hmo HMIDIOUT
  lpMidiOutHdr LPMIDIHDR
  cbMidiOutHdr UINT

func midiOutMessage
  MMRESULT
  deviceID HMIDIOUT
  msg UINT
  dw1 DWORD_PTR
  dw2 DWORD_PTR

func midiOutOpen
  MMRESULT
  lphmo LPHMIDIOUT
  uDeviceID UINT_PTR
  dwCallback DWORD_PTR
  dwCallbackInstance DWORD_PTR
  dwFlags [midiInOutOpenFlags]

func midiOutPrepareHeader
  MMRESULT
  hmo HMIDIOUT
  lpMidiOutHdr LPMIDIHDR
  cbMidiOutHdr UINT

func midiOutReset
  MMRESULT
  hmo HMIDIOUT

func midiOutSetVolume
  MMRESULT
  hmo HMIDIOUT
  dwVolume DWORD

func midiOutShortMsg
  MMRESULT
  hmo HMIDIOUT
  dwMsg DWORD

func midiOutUnprepareHeader
  MMRESULT
  hmo HMIDIOUT
  lpMidiOutHdr LPMIDIHDR
  cbMidiOutHdr UINT

func midiStreamClose
  MMRESULT
  hStream HMIDISTRM

func midiStreamOpen
  MMRESULT
  lphStream LPHMIDISTRM
  puDeviceID LPUINT
  cMidi DWORD
  dwCallback DWORD_PTR
  dwInstance DWORD_PTR
  fdwOpen DWORD

func midiStreamOut
  MMRESULT
  hMidiStream HMIDISTRM
  lpMidiHdr LPMIDIHDR
  cbMidiHdr UINT

func midiStreamPause
  MMRESULT
  hms HMIDISTRM

func midiStreamPosition
  MMRESULT
  hms HMIDISTRM
  pmmt LPMMTIME
  cbmmt UINT

func midiStreamProperty
  MMRESULT
  hm HMIDISTRM
  lppropdata LPBYTE
  dwProperty DWORD

func midiStreamRestart
  MMRESULT
  hms HMIDISTRM

func midiStreamStop
  MMRESULT
  hms HMIDISTRM

func mixerClose
  MMRESULT
  hmx HMIXER

func mixerGetControlDetails bothCharset
  MMRESULT
  hmxobj HMIXEROBJ
  pmxcd LPMIXERCONTROLDETAILS
  fdwDetails DWORD

func mixerGetDevCaps bothCharset
  MMRESULT
  uMxId UINT_PTR
  pmxcaps LPMIXERCAPS
  cbmxcaps UINT

func mixerGetID
  MMRESULT
  hmxobj HMIXEROBJ
  puMxId UINT*
  fdwId DWORD

func mixerGetLineControls bothCharset
  MMRESULT
  hmxobj HMIXEROBJ
  pmxlc LPMIXERLINECONTROLS
  fdwControls DWORD

func mixerGetLineInfo bothCharset
  MMRESULT
  hmxobj HMIXEROBJ
  pmxl LPMIXERLINE
  fdwInfo DWORD

func mixerGetNumDevs
  success NotEqual=0
  UINT

func mixerMessage
  DWORD
  driverID HMIXER
  uMsg UINT
  dwParam1 DWORD_PTR
  dwParam2 DWORD_PTR

func mixerOpen
  MMRESULT
  phmx LPHMIXER
  uMxId UINT
  dwCallback DWORD_PTR
  dwInstance DWORD_PTR
  fdwOpen DWORD

func mixerSetControlDetails
  MMRESULT
  hmxobj HMIXEROBJ
  pmxcd LPMIXERCONTROLDETAILS
  fdwDetails DWORD

func mmioAdvance
  MMRESULT
  hmmio HMMIO
  lpmmioinfo LPMMIOINFO
  wFlags UINT

func mmioAscend
  MMRESULT
  hmmio HMMIO
  lpck LPMMCKINFO
  wFlags UINT

func mmioClose
  MMRESULT
  hmmio HMMIO
  wFlags [mmioCloseFlags]

func mmioCreateChunk
  MMRESULT
  hmmio HMMIO
  lpck LPMMCKINFO
  wFlags [mmioCreateChunkFlags]

func mmioDescend
  MMRESULT
  hmmio HMMIO
  lpck LPMMCKINFO
  lpckParent LPMMCKINFO
  wFlags [mmioDescendFlags]

func mmioFlush
  MMRESULT
  hmmio HMMIO
  fuFlush [mmioFlushFlags]

func mmioGetInfo
  MMRESULT
  hmmio HMMIO
  lpmmioinfo LPMMIOINFO
  wFlags UINT

func mmioInstallIOProc bothCharset
  success NotEqual=0
  LPMMIOPROC
  fccIOProc FOURCC
  pIOProc LPMMIOPROC
  dwFlags [mmioInstallIOProcFlags]

func mmioOpen bothCharset
  success NotEqual=0
  HMMIO
  szFilename LPTSTR
  lpmmioinfo LPMMIOINFO
  dwOpenFlags DWORD

func mmioRead
  success NotEqual=-1
  LONG
  hmmio HMMIO
  pch HPSTR postLength=Return
  cch LONG

func mmioRename bothCharset
  MMRESULT
  szFilename LPCTSTR
  szNewFilename LPCTSTR
  lpmmioinfo "const LPMMIOINFO"
  dwRenameFlags DWORD

func mmioSeek
  success NotEqual=0
  LONG
  hmmio HMMIO
  lOffset LONG
  iOrigin [mmioSeekOffset]

func mmioSendMessage
  success NotEqual=0
  LRESULT
  hmmio HMMIO
  wMsg UINT
  lParam1 LPARAM
  lParam2 LPARAM

func mmioSetBuffer
  MMRESULT
  hmmio HMMIO
  pchBuffer LPSTR
  cchBuffer LONG
  wFlags UINT

func mmioSetInfo
  MMRESULT
  hmmio HMMIO
  lpmmioinfo LPMMIOINFO
  wFlags UINT

func mmioStringToFOURCC bothCharset
  FOURCC
  sz LPCTSTR
  wFlags [mmioStringToFOURCCFlags]

func mmioWrite
  success NotEqual=-1
  LONG
  hmmio HMMIO
  pch [LPVOID|char*] length=cch
  cch LONG

func timeBeginPeriod
  MMRESULT
  uPeriod UINT

func timeEndPeriod
  MMRESULT
  uPeriod UINT

func timeGetDevCaps
  MMRESULT
  ptc LPTIMECAPS
  cbtc UINT

func timeGetSystemTime
  MMRESULT
  pmmt LPMMTIME
  cbmmt UINT

func timeGetTime
  DWORD

func timeKillEvent
  MMRESULT
  uTimerID UINT

func timeSetEvent
  success NotEqual=0
  MMRESULT
  uDelay UINT
  uResolution UINT
  lpTimeProc LPTIMECALLBACK
  dwUser DWORD_PTR
  fuEvent UINT

func waveInAddBuffer
  MMRESULT
  hwi HWAVEIN
  pwh LPWAVEHDR
  cbwh UINT

func waveInClose
  MMRESULT
  hwi HWAVEIN

func waveInGetDevCaps bothCharset
  MMRESULT
  uDeviceID UINT_PTR
  pwic LPWAVEINCAPS
  cbwic UINT

func waveInGetErrorText bothCharset
  MMRESULT
  mmrError MMRESULT
  pszText LPTSTR
  cchText UINT

func waveInGetID
  MMRESULT
  hwi HWAVEIN
  puDeviceID LPUINT

func waveInGetNumDevs
  success NotEqual=0
  UINT

func waveInGetPosition
  MMRESULT
  hwi HWAVEIN
  pmmt LPMMTIME
  cbmmt UINT

func waveInMessage
  MMRESULT
  deviceID HWAVEIN
  uMsg UINT
  dwParam1 DWORD_PTR
  dwParam2 DWORD_PTR

func waveInOpen
  MMRESULT
  phwi LPHWAVEIN
  uDeviceID UINT_PTR
  pwfx LPWAVEFORMATEX
  dwCallback DWORD_PTR
  dwCallbackInstance DWORD_PTR
  fdwOpen [waveInOutOpenFlags]

func waveInPrepareHeader
  MMRESULT
  hwi HWAVEIN
  pwh LPWAVEHDR
  cbwh UINT

func waveInReset
  MMRESULT
  hwi HWAVEIN

func waveInStart
  MMRESULT
  hwi HWAVEIN

func waveInStop
  MMRESULT
  hwi HWAVEIN

func waveInUnprepareHeader
  MMRESULT
  hwi HWAVEIN
  pwh LPWAVEHDR
  cbwh UINT

func waveOutBreakLoop
  MMRESULT
  hwo HWAVEOUT

func waveOutClose
  MMRESULT
  hwo HWAVEOUT

func waveOutGetDevCaps bothCharset
  MMRESULT
  uDeviceID UINT_PTR
  pwoc LPWAVEOUTCAPS
  cbwoc UINT

func waveOutGetErrorText bothCharset
  MMRESULT
  mmrError MMRESULT
  pszText LPTSTR
  cchText UINT

func waveOutGetID
  MMRESULT
  hwo HWAVEOUT
  puDeviceID LPUINT

func waveOutGetNumDevs
  success NotEqual=0
  UINT

func waveOutGetPitch
  MMRESULT
  hwo HWAVEOUT
  pdwPitch LPDWORD

func waveOutGetPlaybackRate
  MMRESULT
  hwo HWAVEOUT
  pdwRate LPDWORD

func waveOutGetPosition
  MMRESULT
  hwo HWAVEOUT
  pmmt LPMMTIME
  cbmmt UINT

func waveOutGetVolume
  MMRESULT
  hwo HWAVEOUT
  pdwVolume LPDWORD

func waveOutMessage
  MMRESULT
  deviceID HWAVEOUT
  uMsg UINT
  dwParam1 DWORD_PTR
  dwParam2 DWORD_PTR

func waveOutOpen
  MMRESULT
  phwo LPHWAVEOUT
  uDeviceID UINT_PTR
  pwfx LPWAVEFORMATEX
  dwCallback DWORD_PTR
  dwCallbackInstance DWORD_PTR
  fdwOpen [waveInOutOpenFlags]

func waveOutPause
  MMRESULT
  hwo HWAVEOUT

func waveOutPrepareHeader
  MMRESULT
  hwo HWAVEOUT
  pwh LPWAVEHDR
  cbwh UINT

func waveOutReset
  MMRESULT
  hwo HWAVEOUT

func waveOutRestart
  MMRESULT
  hwo HWAVEOUT

func waveOutSetPitch
  MMRESULT
  hwo HWAVEOUT
  dwPitch DWORD

func waveOutSetPlaybackRate
  MMRESULT
  hwo HWAVEOUT
  dwRate DWORD

func waveOutSetVolume
  MMRESULT
  hwo HWAVEOUT
  dwVolume DWORD

func waveOutUnprepareHeader
  MMRESULT
  hwo HWAVEOUT
  pwh LPWAVEHDR
  cbwh UINT

func waveOutWrite
  MMRESULT
  hwo HWAVEOUT
  pwh LPWAVEHDR
  cbwh UINT

func PlaySound bothCharset
  BOOL
  pszSound LPCTSTR
  hmod HMODULE
  fdwSound [SND_FLAGS]

func sndPlaySound bothCharset
  BOOL
  lpszSound LPCTSTR
  fuSound [SND_FLAGS] display=UINT

func CloseDriver
  success NotEqual=0
  LRESULT
  hDriver HDRVR
  lParam1 LPARAM
  lParam2 LPARAM

func DefDriverProc
  success NotEqual=0
  LRESULT
  dwDriverIdentifier DWORD_PTR
  hdrvr HDRVR
  uMsg UINT
  lParam1 LPARAM
  lParam2 LPARAM

func DriverCallback
  BOOL
  dwCallback DWORD_PTR
  dwFlags [DCB_FLAGS]
  hDevice HDRVR
  dwMsg DWORD
  dwUser DWORD_PTR
  dwParam1 DWORD_PTR
  dwParam2 DWORD_PTR

func DrvGetModuleHandle
  success NotEqual=0
  HMODULE
  hDriver HDRVR

func GetDriverModuleHandle
  success NotEqual=0
  HMODULE
  hDriver HDRVR

func OpenDriver
  success NotEqual=0
  HDRVR
  szDriverName LPCWSTR
  szSectionName LPCWSTR
  lParam2 LPARAM

func SendDriverMessage
  success NotEqual=0
  LRESULT
  hDriver HDRVR
  message UINT
  lParam1 LPARAM
  lParam2 LPARAM

func mmDrvInstall
  success NotEqual=0
  UINT
  hDriver HDRVR
  wszDrvEntry LPCWSTR
  drvMessage DRIVERMSGPROC
  wFlags UINT

func mmGetCurrentTask
  success NotEqual=0
  DWORD

func mmTaskBlock
  VOID
  h DWORD

func mmTaskCreate
  success NotEqual=0
  UINT
  lpfn LPTASKCALLBACK
  lph HANDLE*
  dwInst DWORD_PTR

func mmTaskSignal
  BOOL
  h DWORD

func mmTaskYield
  VOID

